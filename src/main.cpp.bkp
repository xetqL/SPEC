#include <iostream>
#include <vector>
#include <tuple>
#include <fstream>
#include <zconf.h>
#include <memory>
#include <map>
#include <cassert>
#include <algorithm>
#include <mpi.h>
#include <numeric>
#include <random>
#include <complex>

#ifdef PRODUCE_OUTPUTS
    #include <cnpy.h>
#endif

#include "../include/cell.hpp"
#include "../include/utils.hpp"
#include "zupply.hpp"
#include "../include/zoltan_fn.hpp"
#include "../include/window.hpp"
#include "../include/io.hpp"
#include "../include/CPULoadDatabase.hpp"
#include "main.hpp"
#include "../include/time.hpp"


zz::log::LoggerPtr perflogger, steplogger;

int main(int argc, char **argv) {
    int worldsize;
    int rank;

    MPI_Init(&argc, &argv);
    auto world = MPI_COMM_WORLD;
    MPI_Comm_size(world, &worldsize);
    MPI_Comm_rank(world, &rank);
    std::string str_rank = "[RANK " + std::to_string(rank) + "] ";
    // Generate data
    int xprocs = std::atoi(argv[2]), yprocs = std::atoi(argv[1]);
    int cell_per_process = std::atoi(argv[3]);
    const int MAX_STEP = std::atoi(argv[4]);
    const int seed = std::atoi(argv[5]);

    zz::log::config_from_file("logger.cfg");
    perflogger = zz::log::get_logger("perf",  true);
    steplogger = zz::log::get_logger("steps", true);

    if(xprocs * yprocs != worldsize) {
        steplogger->fatal() << "Grid size does not match world size";
        MPI_Abort(world, 1);
        return EXIT_FAILURE;
    }

    int cell_in_my_rows = (int) std::sqrt(cell_per_process), cell_in_my_cols = cell_in_my_rows;
    int xcells = cell_in_my_rows * xprocs, ycells = cell_in_my_rows * yprocs;
    std::vector<int> cols(ycells);
    std::iota(cols.begin(), cols.end(), 0);

    std::mt19937 gen(seed); ///predictable sequence of value

    std::shuffle(cols.begin(), cols.end(), gen);
    cols = {0, 1};
    std::vector<int> water_cols(cols.begin(), cols.begin()+1 );
    std::sort(water_cols.begin(), water_cols.end());
    //std::for_each(water_cols.cbegin(), water_cols.cend(), [](auto v){ std::cout << v << std::endl; });

    int& msx = Cell::get_msx(); msx = xcells;
    int& msy = Cell::get_msy(); msy = ycells;

    int shape[2] = {msx,msy};

#ifdef PRODUCE_OUTPUTS
    if(!rank) cnpy::npz_save("gids-out.npz", "shape", &shape[0], {2}, "w");
#endif

    int x_proc_idx, y_proc_idx;
    std::tie(x_proc_idx, y_proc_idx) = cell_to_global_position(xprocs, yprocs, rank);
    unsigned long total_cell = cell_per_process * worldsize;
    auto datatype   = Cell::register_datatype();
    if(!rank) {
        steplogger->info("CPU COUNT:")    << worldsize;
        steplogger->info("GRID PSIZE X:") << xprocs;
        steplogger->info("GRID PSIZE Y:") << yprocs;
        steplogger->info("GRID SIZE  X:") << msx;
        steplogger->info("GRID SIZE  Y:") << msy;
        steplogger->info("EACH SIZE  X:") << xcells;
        steplogger->info("EACH SIZE  Y:") << ycells;
    }
    if(!rank) steplogger->info() << cell_in_my_cols << " " << cell_in_my_rows;
    std::vector<Cell> my_cells;
#ifndef PRODUCE_OUTPUTS
    my_cells = generate_lattice_percolation_diffusion(msx, msy, x_proc_idx, y_proc_idx,cell_in_my_cols,cell_in_my_rows, water_cols);
#else
    if(argc == 7){
        auto lattice_fname = argv[6];
        my_cells = generate_lattice_percolation_diffusion(msx, msy, x_proc_idx, y_proc_idx,cell_in_my_cols,cell_in_my_rows, water_cols, lattice_fname);
    } else {
        my_cells = generate_lattice_percolation_diffusion(msx, msy, x_proc_idx, y_proc_idx,cell_in_my_cols,cell_in_my_rows, water_cols);
    }
#endif

    const int my_cell_count = my_cells.size();

#ifdef PRODUCE_OUTPUTS
    std::vector<std::array<int,2>> all_types(total_cell);
    std::vector<std::array<int,2>> my_types(my_cell_count);
    for (int i = 0; i < my_cell_count; ++i) my_types[i] = {my_cells[i].gid, my_cells[i].type};
    gather_elements_on(my_types, 0, &all_types, datatype.minimal_datatype, world);
    if(!rank) {
        std::sort(all_types.begin(), all_types.end(), [](auto a, auto b){return a[0] < b[0];});
        std::vector<int> types, water_gid;
        std::for_each(all_types.begin(), all_types.end(), [&types](auto e){types.push_back(e[1]);});
        std::for_each(all_types.begin(), all_types.end(), [&water_gid](auto e){if(!e[1]) water_gid.push_back(e[0]);});
        assert((*(all_types.end() - 1))[0] == total_cell-1);
        cnpy::npz_save("gids-out.npz", "step-"+std::to_string(0), &water_gid[0], {water_gid.size()}, "a");
    }
    if(!rank) all_types.resize(total_cell);
#endif

    int recv, sent;
    if(!rank) steplogger->info() << "End of map generation";

    /* Initial load balancing */
    std::vector<double> lb_costs;
    auto zoltan_lb = zoltan_create_wrapper(true, world);

    PAR_START_TIMING(current_lb_cost, world);
    zoltan_load_balance(&my_cells, zoltan_lb, true, true);
    PAR_STOP_TIMING(current_lb_cost, world);
    lb_costs.push_back(current_lb_cost);

    /* lets make it fun now...*/
    int minx, maxx, miny, maxy;
    std::vector<size_t> data_pointers;

#ifdef LB_METHOD
    auto avg_lb_cost = stats::mean<double>(lb_costs.begin(), lb_costs.end());
    auto tau = 25; // ???
#endif

    SlidingWindow<double> window_total(100); //sliding window with max size = TODO: tune it?
    SlidingWindow<double> window (100); //sliding window with max size = TODO: tune it?

    int ncall = 10, pcall=0;
#if LB_METHOD==1
    ncall = 100;
#endif

    float average_load_at_lb;
    double skew = 0, relative_slope, my_time_slope, total_slope, degradation=0.0;
    std::vector<double> timings(worldsize);

    CPULoadDatabase gossip_workload_db(world);

    PAR_START_TIMING(loop_time, world);
    for(unsigned int step = 0; step < MAX_STEP; ++step) {
        PAR_START_TIMING(step_time, world);

#ifdef LB_METHOD

#if LB_METHOD==1   // load balance every 100 iterations
        if((pcall + ncall) == step) {
            if(!rank) steplogger->info("call LB at: ") << step;
            PAR_START_TIMING(current_lb_cost, world);
            zoltan_load_balance(&my_cells, zoltan_lb, true, true);
            PAR_STOP_TIMING(current_lb_cost, world);
            lb_costs.push_back(current_lb_cost);
            ncall = 100;
            if(!rank) steplogger->info("next LB call at: ") << (step+ncall);
            pcall = step;
        }
#elif LB_METHOD == 2 // http://sc16.supercomputing.org/sc-archive/tech_poster/poster_files/post247s2-file3.pdf
        double my_time_slope = get_slope<double>(window.data_container), total_slope, relative_slope;
        if (ncall + pcall == step) {
            double total_slope = get_slope<double>(window_total.data_container);
            if(!rank) steplogger->info("call LB at: ") << step;
            PAR_START_TIMING(current_lb_cost, world);
            zoltan_load_balance(&my_cells, zoltan_lb, true, true);
            PAR_STOP_TIMING(current_lb_cost, world);
            lb_costs.push_back(current_lb_cost);
            avg_lb_cost = stats::mean<double>(lb_costs.begin(), lb_costs.end());
            if(total_slope > 0) ncall = std::sqrt((2 * avg_lb_cost) / total_slope);
            else ncall = MAX_STEP;
            window.data_container.clear();
            window_total.data_container.clear();
            if(!rank) steplogger->info("next LB call at: ") << (step+ncall);
            pcall = step;
        }
#elif LB_METHOD == 3 // Unloading Model
        double my_slope_before_lb;
        double my_last_step_time;

        //http://delivery.acm.org/10.1145/3210000/3205304/p318-Zhai.pdf?ip=129.194.71.44&id=3205304&acc=ACTIVE%20SERVICE&key=FC66C24E42F07228%2E1F81E5291441A4B9%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&__acm__=1550853138_12520c5a2a037b11fcd410073a54671e
        if(pcall + ncall <= step || degradation > avg_lb_cost) {
            my_slope_before_lb = my_time_slope;
            std::vector<double> slopes(worldsize);
            my_time_slope = get_slope<double>(window.data_container);
            MPI_Allgather(&my_time_slope, 1, MPI_DOUBLE, &slopes.front(), 1, MPI_DOUBLE, world); // TODO: propagate information differently
            auto avg_slope = stats::mean<double>(slopes.begin(), slopes.end());
            int overloaded = std::count_if(slopes.begin(), slopes.end(), [&](auto s){ return s > avg_slope; });
            if(overloaded < worldsize / 2) {
                if(!rank) steplogger->info("call LB (new) at: ") << step;
                my_last_step_time  = window.data_container.back();
                update_cell_weights(&my_cells, my_time_slope, WATER_TYPE, [] (auto a, auto b){return a - b;});
                PAR_START_TIMING(current_lb_cost, world);
                zoltan_load_balance(&my_cells, zoltan_lb, true, true);
                PAR_STOP_TIMING(current_lb_cost, world);
                lb_costs.push_back(current_lb_cost);
                window.data_container.clear();
                window_total.data_container.clear();
            } else {
                if(!rank) steplogger->info("call LB at: ") << step;
                std::vector<double> slopes(worldsize);
                MPI_Allgather(&my_time_slope, 1, MPI_DOUBLE, &slopes.front(), 1, MPI_DOUBLE, world); // TODO: propagate information differently
                auto max_slope  = *std::max_element(slopes.begin(), slopes.end());
                if(max_slope > 0) {
                    PAR_START_TIMING(current_lb_cost, world);
                    zoltan_load_balance(&my_cells, zoltan_lb, true, true);
                    PAR_STOP_TIMING(current_lb_cost, world);
                    avg_lb_cost = stats::mean<double>(lb_costs.begin(), lb_costs.end());
                    auto median = window_total.median(window_total.end() - 3, window_total.end() - 1);
                    ncall = std::max(3, (int) std::sqrt((2 * window_total.size() * avg_lb_cost) / (window_total.mean() - median)));
                } else ncall = 100;

                window.data_container.clear();
                window_total.data_container.clear();

                if(!rank) steplogger->info("next LB call at: ") << (step+ncall);
                pcall = step;
            }
            degradation = 0.0;
        }
#endif
        PAR_STOP_TIMING(step_time, world);
#endif

        if(!rank) steplogger->info() << "Beginning step "<< step;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// COMPUTATION START
        PAR_RESTART_TIMING(step_time, world);
        PAR_START_TIMING(comp_time, world);
        auto remote_cells = zoltan_exchange_data(zoltan_lb,my_cells,&recv,&sent,datatype.element_datatype,world,1.0);
        auto bbox = get_bounding_box(my_cells, remote_cells);
        populate_data_pointers(msx, msy, &data_pointers, my_cells, remote_cells, bbox);
        my_cells = dummy_erosion_computation2(msx, msy, my_cells, remote_cells, data_pointers, bbox);
        CHECKPOINT_TIMING(step_time, my_step_time);
        CHECKPOINT_TIMING(comp_time, my_comp_time);
        if(step > 0) window.add(my_comp_time);

        // update my data in my database

#if LB_METHOD==3 // compute ncall
        //if(step > 0) {
        //    gossip_workload_db.gossip_update(my_step_time);
        //    gossip_workload_db.gossip_propagate(); // propagate my database
        //}
        if(pcall + ncall <= step) {
            std::vector<double> slopes(worldsize), times_and_slopes(worldsize * 2);
            auto my_slope_after_lb   = my_last_step_time - my_step_time;
            auto my_slope_prediction = my_slope_before_lb - my_slope_after_lb;
            double time_and_slope[2] = {my_step_time, my_slope_prediction};
            MPI_Allgather(time_and_slope, 2, MPI_DOUBLE, &times_and_slopes.front(), 2, MPI_DOUBLE, world); // TODO: propagate information differently

            for (unsigned int i = 0; i < worldsize; ++i) {
                timings[i] = times_and_slopes[2 * i];
                slopes[i]  = times_and_slopes[2 * i + 1];
            }
            auto mu = stats::mean<double>(timings.begin(), timings.end());
            // auto min_timing = *std::min_element(timings.begin(), timings.end());
            // auto max_slope  = *std::max_element(slopes.begin(), slopes.end());
            ncall = 3;
            for (int j = 0; j < worldsize; ++j) ncall = std::max(ncall, (int) ((mu-timings[j]) / slopes[j]));
            total_slope = std::max(std::accumulate(slopes.begin(), slopes.end(), 0.0), 0.0);
            skew = stats::skewness<double>(timings.cbegin(), timings.cend());
            pcall = step;
            if(!rank) steplogger->info("next LB call at: ") << (step+ncall);
        }
#endif
        PAR_STOP_TIMING(step_time, world);
        window_total.add(step_time);

        if(window_total.size() > 2)
            degradation += (window_total.mean() - window_total.median(window_total.end() - 3, window_total.end() - 1)); // median among [cts-2, cts]

        /// COMPUTATION STOP
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        std::vector<int> PE_cells(worldsize);
        MPI_Allgather(&my_step_time, 1, MPI_DOUBLE, &timings.front(), 1, MPI_DOUBLE, world); // TODO: propagate information differently
        std::vector<double> slopes(worldsize);
        my_time_slope = get_slope<double>(window.data_container);
        MPI_Allgather(&my_time_slope, 1, MPI_DOUBLE, &slopes.front(), 1, MPI_DOUBLE, world); // TODO: propagate information differently
        double max = *std::max_element(timings.cbegin(), timings.cend()),
               average = std::accumulate(timings.cbegin(), timings.cend(), 0.0) / worldsize,
               load_imbalance = (max / average - 1.0) * 100.0;

        if(!rank) {
            steplogger->info("stats: ") << "load imbalance: " << load_imbalance << " skewness: " << skew;
            perflogger->info("\"step\":") << step << ",\"total time\": " << std::accumulate(timings.begin(), timings.end(), 0.0) << ",\"lb_cost\": " << stats::mean<double>(lb_costs.begin(), lb_costs.end()) << ",\"load_imbalance\": " << load_imbalance << ",\"skewness\": " << stats::skewness<double>(timings.begin(), timings.end()) << ",\"loads\": [" << timings << "],\"slopes\":["<<slopes<<"]";
        }


#ifdef PRODUCE_OUTPUTS
        int cell_cnt = my_cells.size();
        std::vector<std::array<int,2>> my_types(cell_cnt);
        for (int i = 0; i < cell_cnt; ++i) my_types[i] = {my_cells[i].gid, my_cells[i].type};
        gather_elements_on(my_types, 0, &all_types, datatype.minimal_datatype, world);
        if(!rank) {
            std::sort(all_types.begin(), all_types.end(), [](auto a, auto b){return a[0] < b[0];});
            std::vector<int> types, rock_gid;
            std::for_each(all_types.begin(), all_types.end(), [&types](auto e){types.push_back(e[1]);});
            std::for_each(all_types.begin(), all_types.end(), [&rock_gid](auto e){if(!e[1]) rock_gid.push_back(e[0]);});
            cnpy::npz_save("gids-out.npz", "step-"+std::to_string(step+1), &rock_gid[0], {rock_gid.size()}, "a");
        }
#endif
        if(!rank) steplogger->info() << "Stop step "<< step;
    }
    PAR_STOP_TIMING(loop_time, world);
    if(!rank) perflogger->info("\"total_time\":") << loop_time;
    if(!rank) steplogger->info("\"total_time\":") << loop_time;
    datatype.free_datatypes();
    MPI_Finalize();
    return 0;
}
